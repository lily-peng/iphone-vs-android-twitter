{"ts":1373985333466,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1373985333800,"patch":[[{"diffs":[[1,"/**\n * A Twitter library in JavaScript\n *\n * @package codebird\n * @version 2.4.2\n * @author J.M. <me@mynetx.net>\n * @copyright 2010-2013 J.M. <me@mynetx.net>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/* jshint curly: true,\n          eqeqeq: true,\n          indent: 4,\n          latedef: true,\n          quotmark: double,\n          undef: true,\n          unused: true,\n          trailing: true,\n          laxbreak: true */\n/* global window,\n          document,\n          navigator,\n          console,\n          XMLHttpRequest,\n          ActiveXObject,\n          b64pad: true,\n          b64_hmac_sha1 */\n\n/**\n * Array.indexOf polyfill\n */\nif (! Array.prototype.indexOf) {\n    Array.prototype.indexOf = function (obj, start) {\n        for (var i = (start || 0); i < this.length; i++) {\n            if (this[i] === obj) {\n                return i;\n            }\n        }\n        return -1;\n    };\n}\n\n/**\n * A Twitter library in JavaScript\n *\n * @package codebird\n * @subpackage codebird-js\n */\n/* jshint -W098 */\nvar Codebird = function () {\n/* jshint +W098 */\n\n    /**\n     * The OAuth consumer key of your registered app\n     */\n    var _oauth_consumer_key = null;\n\n    /**\n     * The corresponding consumer secret\n     */\n    var _oauth_consumer_secret = null;\n\n    /**\n     * The app-only bearer token. Used to authorize app-only requests\n     */\n    var _oauth_bearer_token = null;\n\n    /**\n     * The API endpoint base to use\n     */\n    var _endpoint_base = \"https://api.twitter.com/\";\n\n    /**\n     * The API endpoint to use\n     */\n    var _endpoint = _endpoint_base + \"1.1/\";\n\n    /**\n     * The API endpoint to use for OAuth requests\n     */\n    var _endpoint_oauth = _endpoint_base;\n\n    /**\n     * API proxy endpoint\n     */\n    var _endpoint_proxy = \"https://api.jublo.net/codebird/\";\n\n    /**\n     * Use JSONP for GET requests in IE7-9\n     */\n    var _use_jsonp = (typeof navigator !== \"undefined\"\n        && typeof navigator.userAgent !== \"undefined\"\n        && (navigator.userAgent.indexOf(\"Trident/4\") > -1\n            || navigator.userAgent.indexOf(\"Trident/5\") > -1\n            || navigator.userAgent.indexOf(\"MSIE 7.0\") > -1\n        )\n    );\n\n    /**\n     * Whether to access the API via a proxy that is allowed by CORS\n     */\n    var _use_proxy = true;\n\n    /**\n     * The Request or access token. Used to sign requests\n     */\n    var _oauth_token = null;\n\n    /**\n     * The corresponding request or access token secret\n     */\n    var _oauth_token_secret = null;\n\n    /**\n     * The current Codebird version\n     */\n    var _version = \"2.4.2\";\n\n    /**\n     * Sets the OAuth consumer key and secret (App key)\n     *\n     * @param string key    OAuth consumer key\n     * @param string secret OAuth consumer secret\n     *\n     * @return void\n     */\n    var setConsumerKey = function (key, secret) {\n        _oauth_consumer_key = key;\n        _oauth_consumer_secret = secret;\n    };\n\n    /**\n     * Sets the OAuth2 app-only auth bearer token\n     *\n     * @param string token OAuth2 bearer token\n     *\n     * @return void\n     */\n    var setBearerToken = function (token) {\n        _oauth_bearer_token = token;\n    };\n\n    /**\n     * Gets the current Codebird version\n     *\n     * @return string The version number\n     */\n    var getVersion = function () {\n        return _version;\n    };\n\n    /**\n     * Sets the OAuth request or access token and secret (User key)\n     *\n     * @param string token  OAuth request or access token\n     * @param string secret OAuth request or access token secret\n     *\n     * @return void\n     */\n    var setToken = function (token, secret) {\n        _oauth_token = token;\n        _oauth_token_secret = secret;\n    };\n\n    /**\n     * Enables or disables CORS proxy\n     *\n     * @param bool use_proxy Whether to use CORS proxy or not\n     *\n     * @return void\n     */\n    var setUseProxy = function (use_proxy) {\n        _use_proxy = !! use_proxy;\n    };\n\n    /**\n     * Sets custom CORS proxy server\n     *\n     * @param string proxy Address of proxy server to use\n     *\n     * @return void\n     */\n    var setProxy = function (proxy) {\n        // add trailing slash if missing\n        if (! proxy.match(/\\/$/)) {\n            proxy += \"/\";\n        }\n        _endpoint_proxy = proxy;\n    };\n\n    /**\n     * Parse URL-style parameters into object\n     *\n     * @param string str String to parse\n     * @param array array to load data into\n     *\n     * @return object\n     */\n    function parse_str(str, array) {\n        // Parses GET/POST/COOKIE data and sets global variables\n        //\n        // version: 1109.2015\n        // discuss at: http://phpjs.org/functions/parse_str    // +   original by: Cagri Ekin\n        // +   improved by: Michael White (http://getsprink.com)\n        // +    tweaked by: Jack\n        // +   bugfixed by: Onno Marsman\n        // +   reimplemented by: stag019    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n        // +   bugfixed by: stag019\n        // -    depends on: urldecode\n        // +   input by: Dreamer\n        // +   bugfixed by: Brett Zamir (http://brett-zamir.me)    // %        note 1: When no argument is specified, will put variables in global scope.\n        // *     example 1: var arr = {};\n        // *     example 1: parse_str('first=foo&second=bar', arr);\n        // *     results 1: arr == { first: 'foo', second: 'bar' }\n        // *     example 2: var arr = {};    // *     example 2: parse_str('str_a=Jack+and+Jill+didn%27t+see+the+well.', arr);\n        // *     results 2: arr == { str_a: \"Jack and Jill didn't see the well.\" }\n        var glue1 = \"=\",\n            glue2 = \"&\",\n            array2 = String(str).replace(/^&?([\\s\\S]*?)&?$/, \"$1\").split(glue2),\n            i, j, chr, tmp, key, value, bracket, keys, evalStr,\n            fixStr = function (str) {\n                return decodeURIComponent(str).replace(/([\\\\\"'])/g, \"\\\\$1\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\");\n            };\n        if (!array) {\n            array = this.window;\n        }\n\n        for (i = 0; i < array2.length; i++) {\n            tmp = array2[i].split(glue1);\n            if (tmp.length < 2) {\n                tmp = [tmp, \"\"];\n            }\n            key = fixStr(tmp[0]);\n            value = fixStr(tmp[1]);\n            while (key.charAt(0) === \" \") {\n                key = key.substr(1);\n            }\n            if (key.indexOf(\"\\0\") !== -1) {\n                key = key.substr(0, key.indexOf(\"\\0\"));\n            }\n            if (key && key.charAt(0) !== \"[\") {\n                keys = [];\n                bracket = 0;\n                for (j = 0; j < key.length; j++) {\n                    if (key.charAt(j) === \"[\" && !bracket) {\n                        bracket = j + 1;\n                    } else if (key.charAt(j) === \"]\") {\n                        if (bracket) {\n                            if (!keys.length) {\n                                keys.push(key.substr(0, bracket - 1));\n                            }\n                            keys.push(key.substr(bracket, j - bracket));\n                            bracket = 0;\n                            if (key.charAt(j + 1) !== \"[\") {\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (!keys.length) {\n                    keys = [key];\n                }\n                for (j = 0; j < keys[0].length; j++) {\n                    chr = keys[0].charAt(j);\n                    if (chr === \" \" || chr === \".\" || chr === \"[\") {\n                        keys[0] = keys[0].substr(0, j) + \"_\" + keys[0].substr(j + 1);\n                    }\n                    if (chr === \"[\") {\n                        break;\n                    }\n                }\n                /* jshint -W061 */\n                evalStr = \"array\";\n                for (j = 0; j < keys.length; j++) {\n                    key = keys[j];\n                    if ((key !== \"\" && key !== \" \") || j === 0) {\n                        key = \"'\" + key + \"'\";\n                    } else {\n                        key = eval(evalStr + \".push([]);\") - 1;\n                    }\n                    evalStr += \"[\" + key + \"]\";\n                    if (j !== keys.length - 1 && eval(\"typeof \" + evalStr) === \"undefined\") {\n                        eval(evalStr + \" = [];\");\n                    }\n                }\n                evalStr += \" = '\" + value + \"';\\n\";\n                eval(evalStr);\n                /* jshint +W061 */\n            }\n        }\n    }\n\n    /**\n     * Main API handler working on any requests you issue\n     *\n     * @param string   fn            The member function you called\n     * @param array    params        The parameters you sent along\n     * @param function callback      The callback to call with the reply\n     * @param bool     app_only_auth Whether to use app-only auth\n     *\n     * @return mixed The API reply encoded in the set return_format\n     */\n\n    var __call = function (fn, params, callback, app_only_auth) {\n        if (typeof params === \"undefined\") {\n            params = {};\n        }\n        if (typeof app_only_auth === \"undefined\") {\n            app_only_auth = false;\n        }\n        if (typeof callback !== \"function\" && typeof params === \"function\") {\n            callback = params;\n            params = {};\n            if (typeof callback === \"bool\") {\n                app_only_auth = callback;\n            }\n        } else if (typeof callback === \"undefined\") {\n            callback = function () {};\n        }\n        switch (fn) {\n        case \"oauth_authenticate\":\n        case \"oauth_authorize\":\n            return this[fn](params, callback);\n\n        case \"oauth2_token\":\n            return this[fn](callback);\n        }\n        // parse parameters\n        var apiparams = {};\n        if (typeof params === \"object\") {\n            apiparams = params;\n        } else {\n            parse_str(params, apiparams); //TODO\n        }\n\n        // map function name to API method\n        var method = \"\";\n        var param, i, j;\n\n        // replace _ by /\n        var path = fn.split(\"_\");\n        for (i = 0; i < path.length; i++) {\n            if (i > 0) {\n                method += \"/\";\n            }\n            method += path[i];\n        }\n\n        // undo replacement for URL parameters\n        var url_parameters_with_underscore = [\"screen_name\"];\n        for (i = 0; i < url_parameters_with_underscore.length; i++) {\n            param = url_parameters_with_underscore[i].toUpperCase();\n            var replacement_was = param.split(\"_\").join(\"/\");\n            method = method.split(replacement_was).join(param);\n        }\n\n        // replace AA by URL parameters\n        var method_template = method;\n        var match = method.match(/[A-Z_]{2,}/);\n        if (match) {\n            for (i = 0; i < match.length; i++) {\n                param = match[i];\n                var param_l = param.toLowerCase();\n                method_template = method_template.split(param).join(\":\" + param_l);\n                if (typeof apiparams[param_l] === \"undefined\") {\n                    for (j = 0; j < 26; j++) {\n                        method_template = method_template.split(String.fromCharCode(65 + j)).join(\"_\" + String.fromCharCode(97 + j));\n                    }\n                    console.warn(\"To call the templated method \\\"\" + method_template + \"\\\", specify the parameter value for \\\"\" + param_l + \"\\\".\");\n                }\n                method = method.split(param).join(apiparams[param_l]);\n                delete apiparams[param_l];\n            }\n        }\n\n        // replace A-Z by _a-z\n        for (i = 0; i < 26; i++) {\n            method = method.split(String.fromCharCode(65 + i)).join(\"_\" + String.fromCharCode(97 + i));\n            method_template = method_template.split(String.fromCharCode(65 + i)).join(\"_\" + String.fromCharCode(97 + i));\n        }\n\n        var httpmethod = _detectMethod(method_template, apiparams);\n        var multipart = _detectMultipart(method_template);\n\n        return _callApi(\n            httpmethod,\n            method,\n            method_template,\n            apiparams,\n            multipart,\n            app_only_auth,\n            callback\n        );\n    };\n\n    /**\n     * Gets the OAuth authenticate URL for the current request token\n     *\n     * @return string The OAuth authenticate URL\n     */\n    var oauth_authenticate = function (params, callback) {\n        if (typeof params.force_login === \"undefined\") {\n            params.force_login = null;\n        }\n        if (typeof params.screen_name === \"undefined\") {\n            params.screen_name = null;\n        }\n        if (_oauth_token === null) {\n            console.warn(\"To get the authenticate URL, the OAuth token must be set.\");\n        }\n        var url = _endpoint_oauth + \"oauth/authenticate?oauth_token=\" + _url(_oauth_token);\n        if (params.force_login === true) {\n            url += \"?force_login=1\";\n            if (params.screen_name !== null) {\n                url += \"&screen_name=\" + params.screen_name;\n            }\n        }\n        callback(url);\n        return true;\n    };\n\n    /**\n     * Gets the OAuth authorize URL for the current request token\n     *\n     * @return string The OAuth authorize URL\n     */\n    var oauth_authorize = function (params, callback) {\n        if (typeof params.force_login === \"undefined\") {\n            params.force_login = null;\n        }\n        if (typeof params.screen_name === \"undefined\") {\n            params.screen_name = null;\n        }\n        if (_oauth_token === null) {\n            console.warn(\"To get the authorize URL, the OAuth token must be set.\");\n        }\n        var url = _endpoint_oauth + \"oauth/authorize?oauth_token=\" + _url(_oauth_token);\n        if (params.force_login === true) {\n            url += \"?force_login=1\";\n            if (params.screen_name !== null) {\n                url += \"&screen_name=\" + params.screen_name;\n            }\n        }\n        callback(url);\n        return true;\n    };\n\n    /**\n     * Gets the OAuth bearer token\n     *\n     * @return string The OAuth bearer token\n     */\n\n    var oauth2_token = function (callback) {\n        if (_oauth_consumer_key === null) {\n            console.warn(\"To obtain a bearer token, the consumer key must be set.\");\n        }\n\n        if (typeof callback === \"undefined\") {\n            callback = function () {};\n        }\n\n        var post_fields = \"grant_type=client_credentials\";\n        var url = _endpoint_oauth + \"oauth2/token\";\n\n        if (_use_proxy) {\n            url = url.replace(\n                _endpoint_base,\n                _endpoint_proxy\n            );\n        }\n\n        var xml;\n        try {\n            xml = new XMLHttpRequest();\n        } catch (e) {\n            xml = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        xml.open(\"POST\", url, true);\n        xml.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        xml.setRequestHeader(\n            (_use_proxy ? \"X-\" : \"\") + \"Authorization\",\n            \"Basic \" + base64_encode(_oauth_consumer_key + \":\" + _oauth_consumer_secret)\n        );\n\n        xml.onreadystatechange = function () {\n            if (xml.readyState >= 4) {\n                var httpstatus = 12027;\n                try {\n                    httpstatus = xml.status;\n                } catch (e) {}\n                var reply = _parseApiReply(\"oauth2/token\", xml.responseText);\n                reply.httpstatus = httpstatus;\n                if (httpstatus === 200) {\n                    setBearerToken(reply.access_token);\n                }\n                callback(reply);\n            }\n        };\n        xml.send(post_fields);\n\n    };\n\n    /**\n     * Signing helpers\n     */\n\n    /**\n     * URL-encodes the given data\n     *\n     * @param mixed data\n     *\n     * @return mixed The encoded data\n     */\n    var _url = function (data) {\n        if (typeof data === \"array\") {\n            /*\n            return array_map(\n                [ // TODO\n                    this, \"_url\"\n                ],\n                data\n            );\n            */\n        } else if ((/boolean|number|string/).test(typeof data)) {\n            return encodeURIComponent(data).replace(/!/g, \"%21\").replace(/'/g, \"%27\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\").replace(/\\*/g, \"%2A\");\n        } else {\n            return \"\";\n        }\n    };\n\n    /**\n     * Gets the base64-encoded SHA1 hash for the given data\n     *\n     * @param string data The data to calculate the hash from\n     *\n     * @return string The hash\n     */\n    var _sha1 = function (data) {\n        if (_oauth_consumer_secret === null) {\n            console.warn(\"To generate a hash, the consumer secret must be set.\");\n        }\n        if (typeof b64_hmac_sha1 !== \"function\") {\n            console.warn(\"To generate a hash, the Javascript SHA1.js must be available.\");\n        }\n        /*jshint -W020 */\n        b64pad = \"=\";\n        /*jshint +W020 */\n        return b64_hmac_sha1(_oauth_consumer_secret + \"&\" + (_oauth_token_secret !== null ? _oauth_token_secret : \"\"), data);\n    };\n\n    var base64_encode = function (data) {\n        // http://kevin.vanzonneveld.net\n        // +   original by: Tyler Akins (http://rumkin.com)\n        // +   improved by: Bayron Guevara\n        // +   improved by: Thunder.m\n        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n        // +   bugfixed by: Pellentesque Malesuada\n        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n        // +   improved by: Rafał Kukawski (http://kukawski.pl)\n        // *     example 1: base64_encode('Kevin van Zonneveld');\n        // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='\n        // mozilla has this native\n        // - but breaks in 2.0.0.12!\n        //if (typeof this.window['btoa'] == 'function') {\n        //    return btoa(data);\n        //}\n        var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n        var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,\n            ac = 0,\n            enc = \"\",\n            tmp_arr = [];\n\n        if (! data) {\n            return data;\n        }\n\n        do { // pack three octets into four hexets\n            o1 = data.charCodeAt(i++);\n            o2 = data.charCodeAt(i++);\n            o3 = data.charCodeAt(i++);\n\n            bits = o1 << 16 | o2 << 8 | o3;\n\n            h1 = bits >> 18 & 0x3f;\n            h2 = bits >> 12 & 0x3f;\n            h3 = bits >> 6 & 0x3f;\n            h4 = bits & 0x3f;\n\n            // use hexets to index into b64, and append result to encoded string\n            tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n        } while (i < data.length);\n\n        enc = tmp_arr.join(\"\");\n\n        var r = data.length % 3;\n\n        return (r ? enc.slice(0, r - 3) : enc) + \"===\".slice(r || 3);\n    };\n\n    var http_build_query = function (formdata, numeric_prefix, arg_separator) {\n        // http://kevin.vanzonneveld.net\n        // +     original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n        // +     improved by: Legaev Andrey\n        // +     improved by: Michael White (http://getsprink.com)\n        // +     improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n        // +     improved by: Brett Zamir (http://brett-zamir.me)\n        // +        revised by: stag019\n        // +     input by: Dreamer\n        // +     bugfixed by: Brett Zamir (http://brett-zamir.me)\n        // +     bugfixed by: MIO_KODUKI (http://mio-koduki.blogspot.com/)\n        // %                note 1: If the value is null, key and value is skipped in http_build_query of PHP. But, phpjs is not.\n        var value, key, tmp = [];\n\n        var _http_build_query_helper = function (key, val, arg_separator) {\n            var k, tmp = [];\n            if (val === true) {\n                val = \"1\";\n            } else if (val === false) {\n                val = \"0\";\n            }\n            if (val !== null) {\n                if(typeof(val) === \"object\") {\n                    for (k in val) {\n                        if (val[k] !== null) {\n                            tmp.push(_http_build_query_helper(key + \"[\" + k + \"]\", val[k], arg_separator));\n                        }\n                    }\n                    return tmp.join(arg_separator);\n                } else if (typeof(val) !== \"function\") {\n                    return _url(key) + \"=\" + _url(val);\n                } else {\n                    throw new Error(\"There was an error processing for http_build_query().\");\n                }\n            } else {\n                return \"\";\n            }\n        };\n\n        if (!arg_separator) {\n            arg_separator = \"&\";\n        }\n        for (key in formdata) {\n            value = formdata[key];\n            if (numeric_prefix && !isNaN(key)) {\n                key = String(numeric_prefix) + key;\n            }\n            var query=_http_build_query_helper(key, value, arg_separator);\n            if(query !== \"\") {\n                tmp.push(query);\n            }\n        }\n\n        return tmp.join(arg_separator);\n    };\n\n    /**\n     * Generates a (hopefully) unique random string\n     *\n     * @param int optional length The length of the string to generate\n     *\n     * @return string The random string\n     */\n    var _nonce = function (length) {\n        if (typeof length === \"undefined\") {\n            length = 8;\n        }\n        if (length < 1) {\n            console.warn(\"Invalid nonce length.\");\n        }\n        var nonce = \"\";\n        for (var i = 0; i < length; i++) {\n            var character = Math.floor(Math.random() * 61);\n            nonce += \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz\".substring(character, character + 1);\n        }\n        return nonce;\n    };\n\n    var _ksort = function (inputArr) {\n        var keys = [], sorter, k;\n\n        sorter = function (a, b) {\n            var aFloat = parseFloat(a),\n            bFloat = parseFloat(b),\n            aNumeric = aFloat + \"\" === a,\n            bNumeric = bFloat + \"\" === b;\n            if (aNumeric && bNumeric) {\n                return aFloat > bFloat ? 1 : aFloat < bFloat ? -1 : 0;\n            } else if (aNumeric && !bNumeric) {\n                return 1;\n            } else if (!aNumeric && bNumeric) {\n                return -1;\n            }\n            return a > b ? 1 : a < b ? -1 : 0;\n        };\n\n        // Make a list of key names\n        for (k in inputArr) {\n            if (inputArr.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        keys.sort(sorter);\n        return keys;\n    };\n\n    /**\n     * Clone objects\n     * \n     * @param object obj    The object to clone\n     *\n     * @return object clone The cloned object\n     */\n    var _clone = function (obj) {\n        var clone = {};\n        for (var i in obj) {\n            if (typeof(obj[i]) === \"object\") {\n                clone[i] = clone(obj[i]);\n            } else {\n                clone[i] = obj[i];\n            }\n        }\n        return clone;\n    };\n\n    /**\n     * Generates an OAuth signature\n     *\n     * @param string          httpmethod    Usually either 'GET' or 'POST' or 'DELETE'\n     * @param string          method        The API method to call\n     * @param array  optional params        The API call parameters, associative\n     * @param bool   optional append_to_get Whether to append the OAuth params to GET\n     *\n     * @return string Authorization HTTP header\n     */\n    var _sign = function (httpmethod, method, params, append_to_get) {\n        if (typeof params === \"undefined\") {\n            params = {};\n        }\n        if (typeof append_to_get === \"undefined\") {\n            append_to_get = false;\n        }\n        if (_oauth_consumer_key === null) {\n            console.warn(\"To generate a signature, the consumer key must be set.\");\n        }\n        var sign_params = {\n            consumer_key: _oauth_consumer_key,\n            version: \"1.0\",\n            timestamp: Math.round(new Date().getTime() / 1000),\n            nonce: _nonce(),\n            signature_method: \"HMAC-SHA1\"\n        };\n        var sign_base_params = {};\n        var value;\n        for (var key in sign_params) {\n            value = sign_params[key];\n            sign_base_params[\"oauth_\" + key] = _url(value);\n        }\n        if (_oauth_token !== null) {\n            sign_base_params.oauth_token = _url(_oauth_token);\n        }\n        var oauth_params = _clone(sign_base_params);\n        for (key in params) {\n            value = params[key];\n            sign_base_params[key] = value;\n        }\n        var keys = _ksort(sign_base_params);\n        var sign_base_string = \"\";\n        for (var i = 0; i < keys.length; i++) {\n            key = keys[i];\n            value = sign_base_params[key];\n            sign_base_string += key + \"=\" + _url(value) + \"&\";\n        }\n        sign_base_string = sign_base_string.substring(0, sign_base_string.length - 1);\n        var signature = _sha1(httpmethod + \"&\" + _url(method) + \"&\" + _url(sign_base_string));\n\n        params = append_to_get ? sign_base_params : oauth_params;\n        params.oauth_signature = signature;\n        keys = _ksort(params);\n        var authorization = \"\";\n        if (append_to_get) {\n            for(i = 0; i < keys.length; i++) {\n                key = keys[i];\n                value = params[key];\n                authorization += key + \"=\" + _url(value) + \"&\";\n            }\n            return authorization.substring(0, authorization.length - 1);\n        }\n        authorization = \"OAuth \";\n        for (i = 0; i < keys.length; i++) {\n            key = keys[i];\n            value = params[key];\n            authorization += key + \"=\\\"\" + _url(value) + \"\\\", \";\n        }\n        return authorization.substring(0, authorization.length - 2);\n    };\n\n    /**\n     * Detects HTTP method to use for API call\n     *\n     * @param string method The API method to call\n     * @param array  params The parameters to send along\n     *\n     * @return string The HTTP method that should be used\n     */\n    var _detectMethod = function (method, params) {\n        // multi-HTTP method endpoints\n        switch(method) {\n        case \"account/settings\":\n            method = params.length ? method + \"__post\" : method;\n            break;\n        }\n\n        var httpmethods = {};\n        httpmethods.GET = [\n            // Timelines\n            \"statuses/mentions_timeline\",\n            \"statuses/user_timeline\",\n            \"statuses/home_timeline\",\n            \"statuses/retweets_of_me\",\n\n            // Tweets\n            \"statuses/retweets/:id\",\n            \"statuses/show/:id\",\n            \"statuses/oembed\",\n\n            // Search\n            \"search/tweets\",\n\n            // Direct Messages\n            \"direct_messages\",\n            \"direct_messages/sent\",\n            \"direct_messages/show\",\n\n            // Friends & Followers\n            \"friendships/no_retweets/ids\",\n            \"friends/ids\",\n            \"followers/ids\",\n            \"friendships/lookup\",\n            \"friendships/incoming\",\n            \"friendships/outgoing\",\n            \"friendships/show\",\n            \"friends/list\",\n            \"followers/list\",\n\n            // Users\n            \"account/settings\",\n            \"account/verify_credentials\",\n            \"blocks/list\",\n            \"blocks/ids\",\n            \"users/lookup\",\n            \"users/show\",\n            \"users/search\",\n            \"users/contributees\",\n            \"users/contributors\",\n            \"users/profile_banner\",\n\n            // Suggested Users\n            \"users/suggestions/:slug\",\n            \"users/suggestions\",\n            \"users/suggestions/:slug/members\",\n\n            // Favorites\n            \"favorites/list\",\n\n            // Lists\n            \"lists/list\",\n            \"lists/statuses\",\n            \"lists/memberships\",\n            \"lists/subscribers\",\n            \"lists/subscribers/show\",\n            \"lists/members/show\",\n            \"lists/members\",\n            \"lists/show\",\n            \"lists/subscriptions\",\n\n            // Saved searches\n            \"saved_searches/list\",\n            \"saved_searches/show/:id\",\n\n            // Places & Geo\n            \"geo/id/:place_id\",\n            \"geo/reverse_geocode\",\n            \"geo/search\",\n            \"geo/similar_places\",\n\n            // Trends\n            \"trends/place\",\n            \"trends/available\",\n            \"trends/closest\",\n\n            // OAuth\n            \"oauth/authenticate\",\n            \"oauth/authorize\",\n\n            // Help\n            \"help/configuration\",\n            \"help/languages\",\n            \"help/privacy\",\n            \"help/tos\",\n            \"application/rate_limit_status\"\n        ];\n        httpmethods.POST = [\n            // Tweets\n            \"statuses/destroy/:id\",\n            \"statuses/update\",\n            \"statuses/retweet/:id\",\n            \"statuses/update_with_media\",\n\n            // Direct Messages\n            \"direct_messages/destroy\",\n            \"direct_messages/new\",\n\n            // Friends & Followers\n            \"friendships/create\",\n            \"friendships/destroy\",\n            \"friendships/update\",\n\n            // Users\n            \"account/settings__post\",\n            \"account/update_delivery_device\",\n            \"account/update_profile\",\n            \"account/update_profile_background_image\",\n            \"account/update_profile_colors\",\n            \"account/update_profile_image\",\n            \"blocks/create\",\n            \"blocks/destroy\",\n            \"account/update_profile_banner\",\n            \"account/remove_profile_banner\",\n\n            // Favorites\n            \"favorites/destroy\",\n            \"favorites/create\",\n\n            // Lists\n            \"lists/members/destroy\",\n            \"lists/subscribers/create\",\n            \"lists/subscribers/destroy\",\n            \"lists/members/create_all\",\n            \"lists/members/create\",\n            \"lists/destroy\",\n            \"lists/update\",\n            \"lists/create\",\n            \"lists/members/destroy_all\",\n\n            // Saved Searches\n            \"saved_searches/create\",\n            \"saved_searches/destroy/:id\",\n\n            // Places & Geo\n            \"geo/place\",\n\n            // Spam Reporting\n            \"users/report_spam\",\n\n            // OAuth\n            \"oauth/access_token\",\n            \"oauth/request_token\",\n            \"oauth2/token\",\n            \"oauth2/invalidate_token\"\n        ];\n        for (var httpmethod in httpmethods) {\n            if (httpmethods[httpmethod].indexOf(method) > -1) {\n                return httpmethod;\n            }\n        }\n        console.warn(\"Can't find HTTP method to use for \\\"\" + method + \"\\\".\");\n    };\n\n    /**\n     * Detects if API call should use multipart/form-data\n     *\n     * @param string method The API method to call\n     *\n     * @return bool Whether the method should be sent as multipart\n     */\n    var _detectMultipart = function (method) {\n        var multiparts = [\n            // Tweets\n            \"statuses/update_with_media\",\n\n            // Users\n            \"account/update_profile_background_image\",\n            \"account/update_profile_image\",\n            \"account/update_profile_banner\"\n        ];\n        return multiparts.indexOf(method) > -1;\n    };\n\n    /**\n     * Build multipart request from upload params\n     *\n     * @param string method  The API method to call\n     * @param array  params  The parameters to send along\n     *\n     * @return string The built multipart request body\n     */\n    var _buildMultipart = function (method, params) {\n        // well, files will only work in multipart methods\n        if (! _detectMultipart(method)) {\n            return;\n        }\n\n        // only check specific parameters\n        var possible_methods = [\n            // Tweets\n            \"statuses/update_with_media\",\n            // Accounts\n            \"account/update_profile_background_image\",\n            \"account/update_profile_image\",\n            \"account/update_profile_banner\"\n        ];\n        var possible_files = {\n            // Tweets\n            \"statuses/update_with_media\": \"media[]\",\n            // Accounts\n            \"account/update_profile_background_image\": \"image\",\n            \"account/update_profile_image\": \"image\",\n            \"account/update_profile_banner\": \"banner\"\n        };\n        // method might have files?\n        if (possible_methods.indexOf(method) === -1) {\n            return;\n        }\n\n        // check for filenames\n        possible_files = possible_files[method].split(\" \");\n\n        var multipart_border = \"--------------------\" + _nonce();\n        var multipart_request = \"\";\n        for (var key in params) {\n            multipart_request +=\n                \"--\" + multipart_border + \"\\r\\n\"\n                + \"Content-Disposition: form-data; name=\\\"\" + key + \"\\\"\";\n            if (possible_files.indexOf(key) > -1) {\n                multipart_request +=\n                    \"\\r\\nContent-Transfer-Encoding: base64\";\n            }\n            multipart_request +=\n                \"\\r\\n\\r\\n\" + params[key] + \"\\r\\n\";\n        }\n        multipart_request += \"--\" + multipart_border + \"--\";\n        return multipart_request;\n    };\n\n    /**\n     * Builds the complete API endpoint url\n     *\n     * @param string method           The API method to call\n     *\n     * @return string The URL to send the request to\n     */\n    var _getEndpoint = function (method) {\n        var url;\n        if (method.substring(0, 5) === \"oauth\") {\n            url = _endpoint_oauth + method;\n        } else {\n            url = _endpoint + method + \".json\";\n        }\n        return url;\n    };\n\n    /**\n     * Calls the API using cURL\n     *\n     * @param string          httpmethod      The HTTP method to use for making the request\n     * @param string          method          The API method to call\n     * @param string          method_template The templated API method to call\n     * @param array  optional params          The parameters to send along\n     * @param bool   optional multipart       Whether to use multipart/form-data\n     * @param bool   optional $app_only_auth  Whether to use app-only bearer authentication\n     * @param function        callback        The function to call with the API call result\n     *\n     * @return mixed The API reply, encoded in the set return_format\n     */\n\n    var _callApi = function (httpmethod, method, method_template, params, multipart, app_only_auth, callback) {\n        if (typeof params === \"undefined\") {\n            params = {};\n        }\n        if (typeof multipart === \"undefined\") {\n            multipart = false;\n        }\n        if (typeof app_only_auth === \"undefined\") {\n            app_only_auth = false;\n        }\n        if (typeof callback !== \"function\") {\n            callback = function () {};\n        }\n\n        var url = _getEndpoint(method);\n        var authorization = null;\n\n        var xml, post_fields;\n        try {\n            xml = new XMLHttpRequest();\n        } catch (e) {\n            xml = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        if (httpmethod === \"GET\") {\n            var url_with_params = url;\n            if (JSON.stringify(params) !== \"{}\") {\n                url_with_params += \"?\" + http_build_query(params);\n            }\n            authorization = _sign(httpmethod, url, params);\n\n            // append auth params to GET url for IE7-9, to send via JSONP\n            if (_use_jsonp) {\n                if (JSON.stringify(params) !== \"{}\") {\n                    url_with_params += \"&\";\n                } else {\n                    url_with_params += \"?\";\n                }\n                var callback_name = _nonce();\n                window[callback_name] = function (reply) {\n                    reply.httpstatus = 200;\n                    callback(reply);\n                };\n                params.callback = callback_name;\n                url_with_params = url + \"?\" + _sign(httpmethod, url, params, true);\n                var tag = document.createElement(\"script\");\n                tag.type = \"text/javascript\";\n                tag.src = url_with_params;\n                var body = document.getElementsByTagName(\"body\")[0];\n                body.appendChild(tag);\n                return;\n\n            } else if (_use_proxy) {\n                url_with_params = url_with_params.replace(\n                    _endpoint_base,\n                    _endpoint_proxy\n                );\n            }\n            xml.open(httpmethod, url_with_params, true);\n        } else {\n            if (_use_jsonp) {\n                console.warn(\"Sending POST requests is not supported for IE7-9.\");\n                return;\n            }\n            if (multipart) {\n                authorization = _sign(httpmethod, url, {});\n                params        = _buildMultipart(method, params);\n            } else {\n                authorization = _sign(httpmethod, url, params);\n                params        = http_build_query(params);\n            }\n            post_fields = params;\n            if (_use_proxy || multipart) { // force proxy for multipart base64\n                url = url.replace(\n                    _endpoint_base,\n                    _endpoint_proxy\n                );\n            }\n            xml.open(httpmethod, url, true);\n            if (multipart) {\n                xml.setRequestHeader(\"Content-Type\", \"multipart/form-data; boundary=\"\n                    + post_fields.split(\"\\r\\n\")[0].substring(2));\n            } else {\n                xml.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            }\n        }\n        if (app_only_auth) {\n            if (_oauth_consumer_key === null) {\n                console.warn(\"To make an app-only auth API request, the consumer key must be set.\");\n            }\n            // automatically fetch bearer token, if necessary\n            if (_oauth_bearer_token === null) {\n                return oauth2_token(function () {\n                    _callApi(httpmethod, method, method_template, params, multipart, app_only_auth, callback);\n                });\n            }\n            authorization = \"Bearer \" + _oauth_bearer_token;\n        }\n        if (authorization !== null) {\n            xml.setRequestHeader((_use_proxy ? \"X-\" : \"\") + \"Authorization\", authorization);\n        }\n        xml.onreadystatechange = function () {\n            if (xml.readyState >= 4) {\n                var httpstatus = 12027;\n                try {\n                    httpstatus = xml.status;\n                } catch (e) {}\n                var reply = _parseApiReply(method_template, xml.responseText);\n                reply.httpstatus = httpstatus;\n                callback(reply);\n            }\n        };\n        xml.send(httpmethod === \"GET\" ? null : post_fields);\n        return true;\n    };\n\n    /**\n     * Parses the API reply to encode it in the set return_format\n     *\n     * @param string method The method that has been called\n     * @param string reply  The actual reply, JSON-encoded or URL-encoded\n     *\n     * @return array|object The parsed reply\n     */\n    var _parseApiReply = function (method, reply) {\n        if (reply === \"[]\") {\n            return [];\n        }\n        var parsed = false;\n        try {\n            parsed = JSON.parse(reply);\n        } catch (e) {\n            parsed = {};\n            if (reply.indexOf(\"<\" + \"?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?\" + \">\") === 0) {\n                // we received XML...\n                // since this only happens for errors,\n                // don't perform a full decoding\n                parsed.request = reply.match(/<request>(.*)<\\/request>/)[1];\n                parsed.error   = reply.match(/<error>(.*)<\\/error>/)[1];\n            } else {\n                // assume query format\n                var elements = reply.split(\"&\");\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i].split(\"=\", 2);\n                    if (element.length > 1) {\n                        parsed[element[0]] = decodeURIComponent(element[1]);\n                    } else {\n                        parsed[element[0]] = null;\n                    }\n                }\n            }\n        }\n        return parsed;\n    };\n\n    return {\n        setConsumerKey: setConsumerKey,\n        getVersion: getVersion,\n        setToken: setToken,\n        setBearerToken: setBearerToken,\n        setUseProxy: setUseProxy,\n        setProxy: setProxy,\n        __call: __call,\n        oauth_authenticate: oauth_authenticate,\n        oauth_authorize: oauth_authorize,\n        oauth2_token: oauth2_token\n    };\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":41187}]],"length":41187,"saved":false}
