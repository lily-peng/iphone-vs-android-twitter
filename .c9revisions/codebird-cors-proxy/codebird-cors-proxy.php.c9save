{"ts":1374621779758,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1374621779730,"patch":[[{"diffs":[[1,"<?php\r\n\r\nnamespace CodeBird;\r\n\r\n/**\r\n * Proxy to the Twitter API, adding CORS headers to replies.\r\n *\r\n * @package codebird\r\n * @version 1.1.1\r\n * @author J.M. <me@mynetx.net>\r\n * @copyright 2013 J.M. <me@mynetx.net>\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nif (! function_exists('http_get_request_headers')) {\r\n    function http_get_request_headers()\r\n    {\r\n        $arh = array();\r\n        $rx_http = '/\\AHTTP_/';\r\n        foreach ($_SERVER as $key => $val) {\r\n            if (preg_match($rx_http, $key)) {\r\n                $arh_key = preg_replace($rx_http, '', $key);\r\n                $rx_matches = array();\r\n                // do some nasty string manipulations to restore the original letter case\r\n                // this should work in most cases\r\n                $rx_matches = explode('_', $arh_key);\r\n                if (count($rx_matches) > 0 && strlen($arh_key) > 2) {\r\n                    foreach ($rx_matches as $ak_key => $ak_val) {\r\n                        $rx_matches[$ak_key] = ucfirst(strtolower($ak_val));\r\n                    }\r\n                    $arh_key = implode('-', $rx_matches);\r\n                }\r\n                $arh[$arh_key] = $val;\r\n            }\r\n        }\r\n        return $arh;\r\n    }\r\n}\r\n\r\nif (! function_exists('http_get_request_body')) {\r\n    function http_get_request_body()\r\n    {\r\n        $body = '';\r\n        $fh   = @fopen('php://input', 'r');\r\n        if ($fh) {\r\n            while (! feof($fh)) {\r\n                $s = fread($fh, 1024);\r\n                if (is_string($s)) {\r\n                    $body .= $s;\r\n                }\r\n            }\r\n            fclose($fh);\r\n        }\r\n        return $body;\r\n    }\r\n}\r\n\r\n$constants = array(\r\n    'CURLE_SSL_CERTPROBLEM' => 58,\r\n    'CURLE_SSL_CACERT' => 60,\r\n    'CURLE_SSL_CACERT_BADFILE' => 77,\r\n    'CURLE_SSL_CRL_BADFILE' => 82,\r\n    'CURLE_SSL_ISSUER_ERROR' => 83\r\n);\r\nforeach ($constants as $id => $i) {\r\n    defined($id) or define($id, $i);\r\n}\r\nunset($constants);\r\nunset($i);\r\nunset($id);\r\n\r\n\r\n$url = $_SERVER['REQUEST_URI'];\r\n$method = $_SERVER['REQUEST_METHOD'];\r\n\r\n$cors_headers = array(\r\n    'Access-Control-Allow-Origin: *',\r\n    'Access-Control-Allow-Headers: Origin, X-Authorization',\r\n    'Access-Control-Allow-Methods: POST, GET, OPTIONS'\r\n);\r\n\r\nforeach($cors_headers as $cors_header) {\r\n    header($cors_header);\r\n}\r\n\r\nif ($method == 'OPTIONS') {\r\n    die();\r\n}\r\n\r\n// get request headers\r\n$headers_received = http_get_request_headers();\r\n$headers = array('Expect:');\r\n\r\n// extract authorization header\r\nif (isset($headers_received['X-Authorization'])) {\r\n    $headers[] = 'Authorization: ' . $headers_received['X-Authorization'];\r\n}\r\n\r\n// get request body\r\n$body = null;\r\nif ($method === 'POST') {\r\n    $body = http_get_request_body();\r\n\r\n    // check for media parameter\r\n    // TODO support multiple media[] params after Twitter allows them\r\n\r\n    if (isset($_POST['media']) && is_array($_POST['media'])) {\r\n        $body = $_POST;\r\n\r\n        // write media file to temp\r\n        $media_file = tempnam(sys_get_temp_dir(), 'codebird-media-');\r\n        $fp = fopen($media_file, 'w');\r\n        fwrite($fp, base64_decode($_POST['media'][0]));\r\n        fclose($fp);\r\n\r\n        // add file to uploads\r\n        unset($body['media']);\r\n        $body['media[]'] = '@' . $media_file;\r\n    }\r\n\r\n    // check for other base64 parameters\r\n    foreach ($_POST as $key => $value) {\r\n        $possible_files = array(\r\n            // media[] is checked above\r\n            'image',\r\n            'banner'\r\n        );\r\n\r\n        if (! in_array($key, $possible_files)) {\r\n            continue;\r\n        }\r\n\r\n        // skip arrays\r\n        if (! is_scalar($value)) {\r\n            continue;\r\n        }\r\n\r\n        // check if valid base64\r\n        if (base64_decode($mystring, true) === false) {\r\n            continue;\r\n        }\r\n\r\n        $body[$key] = base64_decode($value);\r\n    }\r\n    \r\n}\r\n\r\n// cut off first subfolder\r\n$url = explode('/', $url);\r\narray_shift($url);\r\narray_shift($url);\r\n$url = implode('/', $url);\r\n$url = 'https://api.twitter.com/' . $url;\r\n\r\n// send request to Twitter API\r\n$ch = curl_init($url);\r\n\r\nif ($method === 'POST') {\r\n    curl_setopt($ch, CURLOPT_POST, 1);\r\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\r\n}\r\n\r\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\r\ncurl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);\r\ncurl_setopt($ch, CURLOPT_HEADER, 1);\r\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);\r\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\r\ncurl_setopt($ch, CURLOPT_CAINFO, __DIR__ . '/cacert.pem');\r\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\r\ncurl_setopt($ch, CURLINFO_HEADER_OUT, 1);\r\n\r\n$reply = curl_exec($ch);\r\n\r\n// delete media file, if any\r\nif (isset($media_file) && file_exists($media_file)) {\r\n    @unlink($media_file);\r\n}\r\n\r\n// certificate validation results\r\n$validation_result = curl_errno($ch);\r\nif (in_array(\r\n        $validation_result,\r\n        array(\r\n            CURLE_SSL_CERTPROBLEM,\r\n            CURLE_SSL_CACERT,\r\n            CURLE_SSL_CACERT_BADFILE,\r\n            CURLE_SSL_CRL_BADFILE,\r\n            CURLE_SSL_ISSUER_ERROR\r\n        )\r\n    )\r\n) {\r\n    die('Error ' . $validation_result . ' while validating the Twitter API certificate.');\r\n}\r\n\r\n$httpstatus = curl_getinfo($ch, CURLINFO_HTTP_CODE);\r\n\r\n// split off headers\r\n$reply = explode(\"\\r\\n\\r\\n\", $reply, 2);\r\n$reply_headers = explode(\"\\r\\n\", $reply[0]);\r\n\r\nforeach($reply_headers as $reply_header) {\r\n    header($reply_header);\r\n}\r\n$reply = $reply[1];\r\n\r\n// send back all data untouched\r\ndie($reply);"]],"start1":0,"start2":0,"length1":0,"length2":6126}]],"length":6126,"saved":false}
{"contributors":[],"silentsave":true,"ts":1374622134600,"patch":[[{"diffs":[[0,"$reply);"],[1,"\r\n"]],"start1":6118,"start2":6118,"length1":8,"length2":10}]],"length":6128,"saved":false}
